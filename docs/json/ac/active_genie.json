{"gems":{"name":"active_genie","downloads":303,"version":"0.0.8","version_created_at":"2025-02-06T19:02:20.961Z","version_downloads":0,"platform":"ruby","authors":"Radamés Roriz","info":"# ActiveGenie 🧞‍♂️\n> Transform your Ruby application with powerful, production-ready GenAI features\n\n[![Gem Version](https://badge.fury.io/rb/active_genie.svg?icon=si%3Arubygems)](https://badge.fury.io/rb/active_genie)\n[![Ruby](https://github.com/roriz/active_genie/actions/workflows/ruby.yml/badge.svg)](https://github.com/roriz/active_genie/actions/workflows/ruby.yml)\n\nActiveGenie is a Ruby gem that provides a polished, production-ready interface for working with Generative AI (GenAI) models. Just like ActiveStorage simplifies file handling in Rails, ActiveGenie makes it effortless to integrate GenAI capabilities into your Ruby applications.\n\n## Features\n\n- 🎯 **Data Extraction**: Extract structured data from unstructured text with type validation\n- 📊 **Smart Scoring**: Multi-reviewer evaluation system with automatic expert selection\n- 💭 **Sentiment Analysis**: Advanced sentiment analysis with customizable rules\n- 🔒 **Safe & Secure**: Built-in validation and sanitization\n- 🛠️ **Configurable**: Supports multiple GenAI providers and models\n\n## Installation\n\n1. Add to your Gemfile:\n```ruby\ngem 'active_genie'\n```\n\n2. Install the gem:\n```shell\nbundle install\n```\n\n3. Generate the configuration:\n```shell\necho \"ActiveGenie.load_tasks\" >> Rakefile\nrails g active_genie:install\n```\n\n4. [Optional] Configure your credentials in `config/active_genie.yml`:\n```yaml\nGPT-4o-mini:\n  api_key: <%= ENV['OPENAI_API_KEY'] %>\n  provider: \"openai\"\n\nclaude-3-5-sonnet:\n  api_key: <%= ENV['ANTHROPIC_API_KEY'] %>\n  provider: \"anthropic\"\n```\n\n> The first key will be used as default in all modules, in this example `GPT-4o-mini`\n\n## Quick Start\n\n### Data Extractor\nExtract structured data from text using AI-powered analysis, handling informal language and complex expressions.\n\n```ruby\ntext = \"Nike Air Max 90 - Size 42 - $199.99\"\nschema = {\n  brand: { \n    type: 'string',\n    enum: [\"Nike\", \"Adidas\", \"Puma\"]\n  },\n  price: { \n    type: 'number',\n    minimum: 0\n  },\n  size: {\n    type: 'integer',\n    minimum: 35,\n    maximum: 46\n  }\n}\n\nresult = ActiveGenie::DataExtractor.call(text, schema)\n# => { \n#      brand: \"Nike\", \n#      brand_explanation: \"Brand name found at start of text\",\n#      price: 199.99,\n#      price_explanation: \"Price found in USD format at end\",\n#      size: 42,\n#      size_explanation: \"Size explicitly stated in the middle\"\n#    }\n```\n\nFeatures:\n- Structured data extraction with type validation\n- Schema-based extraction with custom constraints\n- Informal text analysis (litotes, hedging)\n- Detailed explanations for extracted values\n\nSee the [Data Extractor README](lib/active_genie/data_extractor/README.md) for informal text processing, advanced schemas, and detailed interface documentation.\n\n### Scoring\nText evaluation system that provides detailed scoring and feedback using multiple expert reviewers. Get balanced scoring through AI-powered expert reviewers that automatically adapt to your content.\n\n```ruby\ntext = \"The code implements a binary search algorithm with O(log n) complexity\"\ncriteria = \"Evaluate technical accuracy and clarity\"\n\nresult = ActiveGenie::Scoring::Basic.call(text, criteria)\n# => {\n#      algorithm_expert_score: 95,\n#      algorithm_expert_reasoning: \"Accurately describes binary search and its complexity\",\n#      technical_writer_score: 90,\n#      technical_writer_reasoning: \"Clear and concise explanation of the algorithm\",\n#      final_score: 92.5\n#    }\n```\n\nFeatures:\n- Multi-reviewer evaluation with automatic expert selection\n- Detailed feedback with scoring reasoning\n- Customizable reviewer weights\n- Flexible evaluation criteria\n\nSee the [Scoring README](lib/active_genie/scoring/README.md) for advanced usage, custom reviewers, and detailed interface documentation.\n\n### Battle\nAI-powered battle evaluation system that determines winners between two players based on specified criteria.\n\n```ruby\nrequire 'active_genie'\n\nplayer_a = \"Implementation uses dependency injection for better testability\"\nplayer_b = \"Code has high test coverage but tightly coupled components\"\ncriteria = \"Evaluate code quality and maintainability\"\n\nresult = ActiveGenie::Battle::Basic.call(player_a, player_b, criteria)\n# => {\n#      winner_player: \"Implementation uses dependency injection for better testability\",\n#      reasoning: \"Player A's implementation demonstrates better maintainability through dependency injection, \n#                 which allows for easier testing and component replacement. While Player B has good test coverage, \n#                 the tight coupling makes the code harder to maintain and modify.\",\n#      what_could_be_changed_to_avoid_draw: \"Focus on specific architectural patterns and design principles\"\n#    }\n```\n\nFeatures:\n- Multi-reviewer evaluation with automatic expert selection\n- Detailed feedback with scoring reasoning\n- Customizable reviewer weights\n- Flexible evaluation criteria\n\nSee the [Battle README](lib/active_genie/battle/README.md) for advanced usage, custom reviewers, and detailed interface documentation.\n\n### Summarizer (WIP)\nThe summarizer is a tool that can be used to summarize a given text. It uses a set of rules to summarize the text out of the box. Uses the best practices of prompt engineering and engineering to make the summarization as accurate as possible.\n\n```ruby\nrequire 'active_genie'\n\ntext = \"Example text to be summarized. The fox jumps over the dog\"\nsummarized_text = ActiveGenie::Summarizer.call(text)\nputs summarized_text # => \"The fox jumps over the dog\"\n```\n\n### Language detector (WIP)\nThe language detector is a tool that can be used to detect the language of a given text. It uses a set of rules to detect the language of the text out of the box. Uses the best practices of prompt engineering and engineering to make the language detection as accurate as possible.\n\n```ruby\nrequire 'active_genie'\n\ntext = \"Example text to be detected\"\nlanguage = ActiveGenie::LanguageDetector.call(text)\nputs language # => \"en\"\n```\n\n### Translator (WIP)\nThe translator is a tool that can be used to translate a given text. It uses a set of rules to translate the text out of the box. Uses the best practices of prompt engineering and engineering to make the translation as accurate as possible.\n\n```ruby\nrequire 'active_genie'\n\ntext = \"Example text to be translated\"\ntranslated_text = ActiveGenie::Translator.call(text, from: 'en', to: 'pt')\nputs translated_text # => \"Exemplo de texto a ser traduzido\"\n```\n\n### Sentiment analyzer (WIP)\nThe sentiment analyzer is a tool that can be used to analyze the sentiment of a given text. It uses a set of rules to analyze the sentiment of the text out of the box. Uses the best practices of prompt engineering and engineering to make the sentiment analysis as accurate as possible.\n\n```ruby\nrequire 'active_genie'\n\ntext = \"Example text to be analyzed\"\nsentiment = ActiveGenie::SentimentAnalyzer.call(text)\nputs sentiment # => \"positive\"\n```\n\n### Elo ranking (WIP)\nThe Elo ranking is a tool that can be used to rank a set of items. It uses a set of rules to rank the items out of the box. Uses the best practices of prompt engineering and engineering to make the ranking as accurate as possible.\n\n```ruby\nrequire 'active_genie'\n\nitems = ['Square', 'Circle', 'Triangle']\ncriterias = 'items that look rounded'\nranked_items = ActiveGenie::EloRanking.call(items, criterias, rounds: 10)\nputs ranked_items # => [{ name: \"Circle\", score: 1500 }, { name: \"Square\", score: 800 }, { name: \"Triangle\", score: 800 }]\n```\n\n\n## Configuration Options\n\n| Option | Description | Default |\n|--------|-------------|---------|\n| `provider` | LLM provider (openai, anthropic, etc) | `nil` |\n| `model` | Model to use | `nil` |\n| `api_key` | Provider API key | `nil` |\n| `timeout` | Request timeout in seconds | `5` |\n| `max_retries` | Maximum retry attempts | `3` |\n\n> **Note:** Each module can append its own set of configuration options, see the individual module documentation for details.\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n","licenses":["Apache-2.0"],"metadata":{"homepage_uri":"https://github.com/Roriz/active_genie","changelog_uri":"https://github.com/Roriz/active_genie/blob/master/CHANGELOG.md","bug_tracker_uri":"https://github.com/Roriz/active_genie/issues","documentation_uri":"https://github.com/Roriz/active_genie/wiki","rubygems_mfa_required":"true"},"yanked":false,"sha":"2d25f3e4fd4d511c8645b788a27f57be275692c1814733b2b9b988fb4c2e845f","spec_sha":"6a773c5c16ef18e03b82f804f508b3129930962c56e28f62129aaea99e6eede7","project_uri":"https://rubygems.org/gems/active_genie","gem_uri":"https://rubygems.org/gems/active_genie-0.0.8.gem","homepage_uri":"https://github.com/Roriz/active_genie","wiki_uri":null,"documentation_uri":"https://github.com/Roriz/active_genie/wiki","mailing_list_uri":null,"source_code_uri":null,"bug_tracker_uri":"https://github.com/Roriz/active_genie/issues","changelog_uri":"https://github.com/Roriz/active_genie/blob/master/CHANGELOG.md","funding_uri":null,"dependencies":{"development":[],"runtime":[]}},"vcs_name":"GitHub","ci":null,"vcs_uri":"https://github.com/Roriz/active_genie"}