{"gems":{"name":"cirron","downloads":1241,"version":"0.4.0","version_created_at":"2024-09-10T13:15:57.775Z","version_downloads":25,"platform":"ruby","authors":"Matt Stuchlik","info":"= Cirron\n\nCirron measures a piece of Ruby code and reports back several performance counters: \nCPU instruction count, branch misses, page faults and time spent measuring. \nIt uses the Linux perf events interface or @ibireme's KPC demo[https://gist.github.com/ibireme/173517c208c7dc333ba962c1f0d67d12] on OSX.\n\nIt can also trace syscalls using +strace+, Linux only!\n\n== Prerequisites\n\n  - Linux with perf events support / Apple ARM OSX\n  - C++\n  - Ruby 3.x\n\n== Usage\n\n=== Performance Counters\n  $ sudo irb\n  irb(main):001> require 'cirron'\n  => true\n  irb(main):002* c = Cirron::collector do\n  irb(main):003*   puts \"Hello\"\n  irb(main):004> end\n  Hello\n  => Counter(time_enabled_ns: 110260, instruction_count: 15406, branch_misses: 525, page_faults: 0)\n\n=== Tracing Syscalls\n\n  $ sudo irb\n  irb> require 'cirron'\n  => true\n  irb> trace = Cirron::tracer do\n  irb>  # Your code here\n  irb>  puts \"Hello\"\n  irb> end\n  => [#<Syscall:0x00007c6c1a4b3608 @args=\"1, [{iov_base=\\\"Hello\\\", iov_len=5}, {iov_base=\\\"\\\\n\\\", iov_len=1}], 2\", @duration=\"0.000201\", @name=\"writev\", @pid=\"2261962\", @retval=\"6\", @timestamp=\"1720285300.334976\">]\n  # Save the trace for ingesting to Perfetto\n  irb> File.write(\"/tmp/trace\", Cirron::to_tef(trace))\n  => 267\n\n=== Tampering with Syscalls\n\nAvailable tampering actions are:\nerror: Inject a fault with the specified errno.\nretval: Inject a success with the specified return value.\nsignal: Deliver the specified signal on syscall entry.\ndelay_enter: Delay syscall entry by the specified time.\ndelay_exit: Delay syscall exit by the specified time.\npoke_enter: Modify memory at argN on syscall entry.\npoke_exit: Modify memory at argN on syscall exit.\nsyscall: Inject a different syscall instead.\n\nThe when argument can be used to specify when to perform the tampering.\n\nSee the Tampering section of the [strace manual page](https://man7.org/linux/man-pages/man1/strace.1.html) for more detailed explanaition of the arguments.\n\n```\n$ sudo irb\nirb> require 'cirron'\n\nirb> injector = Cirron.injector\nirb> injector.inject(\"openat\", \"error\", \"ENOSPC\")\nirb> injector.inject(\"openat\", \"delay_enter\", \"1s\", when_condition=\"2+2\")\nirb> injector.run do\nirb>     # Open now fails with \"No space left on device\" and every\nirb>     # other call to `openat` will be delayed by 1s.\nirb>     File.open(\"test.txt\", \"w\")\nirb> end\n```\n\n== Additional Information\n\nFor more detailed information, please visit the project's GitHub page: https://github.com/s7nfo/Cirron","licenses":["MIT"],"metadata":{"homepage_uri":"https://github.com/s7nfo/Cirron","source_code_uri":"https://github.com/s7nfo/Cirron"},"yanked":false,"sha":"fc4b312c0f3c5970d500b08dab374a50b52945727b34cc8e07edba504a72ca48","spec_sha":"cdf04712deb6b0eb2b7cb39a73a3dfeafe0614593e8b4557ec242fc06d4034d0","project_uri":"https://rubygems.org/gems/cirron","gem_uri":"https://rubygems.org/gems/cirron-0.4.0.gem","homepage_uri":"https://github.com/s7nfo/Cirron","wiki_uri":null,"documentation_uri":null,"mailing_list_uri":null,"source_code_uri":"https://github.com/s7nfo/Cirron","bug_tracker_uri":null,"changelog_uri":null,"funding_uri":null,"dependencies":{"development":[],"runtime":[]}},"vcs_name":"GitHub","ci":1,"github_actions":1,"vcs_uri":"https://github.com/s7nfo/Cirron"}