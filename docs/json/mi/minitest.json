{"gems":{"name":"minitest","downloads":763868053,"version":"5.22.0","version_created_at":"2024-02-05T20:17:44.281Z","version_downloads":3272,"platform":"ruby","authors":"Ryan Davis","info":"minitest provides a complete suite of testing facilities supporting\nTDD, BDD, mocking, and benchmarking.\n\n    \"I had a class with Jim Weirich on testing last week and we were\n     allowed to choose our testing frameworks. Kirk Haines and I were\n     paired up and we cracked open the code for a few test\n     frameworks...\n\n     I MUST say that minitest is *very* readable / understandable\n     compared to the 'other two' options we looked at. Nicely done and\n     thank you for helping us keep our mental sanity.\"\n\n    -- Wayne E. Seguin\n\nminitest/test is a small and incredibly fast unit testing framework.\nIt provides a rich set of assertions to make your tests clean and\nreadable.\n\nminitest/spec is a functionally complete spec engine. It hooks onto\nminitest/test and seamlessly bridges test assertions over to spec\nexpectations.\n\nminitest/benchmark is an awesome way to assert the performance of your\nalgorithms in a repeatable manner. Now you can assert that your newb\nco-worker doesn't replace your linear algorithm with an exponential\none!\n\nminitest/mock by Steven Baker, is a beautifully tiny mock (and stub)\nobject framework.\n\nminitest/pride shows pride in testing and adds coloring to your test\noutput. I guess it is an example of how to write IO pipes too. :P\n\nminitest/test is meant to have a clean implementation for language\nimplementors that need a minimal set of methods to bootstrap a working\ntest suite. For example, there is no magic involved for test-case\ndiscovery.\n\n    \"Again, I can't praise enough the idea of a testing/specing\n     framework that I can actually read in full in one sitting!\"\n\n    -- Piotr Szotkowski\n\nComparing to rspec:\n\n    rspec is a testing DSL. minitest is ruby.\n\n    -- Adam Hawkins, \"Bow Before MiniTest\"\n\nminitest doesn't reinvent anything that ruby already provides, like:\nclasses, modules, inheritance, methods. This means you only have to\nlearn ruby to use minitest and all of your regular OO practices like\nextract-method refactorings still apply.","licenses":["MIT"],"metadata":{"homepage_uri":"https://github.com/minitest/minitest","changelog_uri":"https://github.com/minitest/minitest/blob/master/History.rdoc","bug_tracker_uri":"https://github.com/minitest/minitest/issues"},"yanked":false,"sha":"5f36c875f57facb59228473c060ca34a968c57edf2e858bdbc890ca6821c6043","project_uri":"https://rubygems.org/gems/minitest","gem_uri":"https://rubygems.org/gems/minitest-5.22.0.gem","homepage_uri":"https://github.com/minitest/minitest","wiki_uri":null,"documentation_uri":null,"mailing_list_uri":null,"source_code_uri":null,"bug_tracker_uri":"https://github.com/minitest/minitest/issues","changelog_uri":"https://github.com/minitest/minitest/blob/master/History.rdoc","funding_uri":null,"dependencies":{"development":[{"name":"hoe","requirements":"~> 4.2"},{"name":"rdoc","requirements":">= 4.0, < 7"}],"runtime":[]}},"vcs_name":"GitHub","ci":1,"github_actions":1,"vcs_uri":"https://github.com/minitest/minitest"}